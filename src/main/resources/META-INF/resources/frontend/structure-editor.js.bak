window.editorElements = [];

class StructureEditor extends HTMLElement {
    // WebPack does not allow this!!
    // static editorElements = [];

    constructor() {
        super();
        // this._shadowRoot = this.attachShadow({ 'mode': 'open' });
        // this._shadowRoot.appendChild(template.content.cloneNode(true));
        // this.appendChild(template.content.cloneNode(true));
        console.info("constructor");

        // let uuid = crypto.randomUUID();
        this.uuid = this.create_UUID();

        this.externalMolChange = false;
        this.fromAttributeChange = false

        this.div = document.createElement('div');
        this.structureEditor = null;
        this.idcode = null;
    }

    connectedCallback() {
        // let molecule = OCL.Molecule.fromSmiles("c1ccccc1");
        console.info("connectedCallback " + this.uuid);

        this.div.setAttribute("id", this.uuid);
        this.div.setAttribute("style", "min-width:400px;min-height:400px;");
        this.div.setAttribute("view-only", false);
        this.div.setAttribute("is-fragment", true);
        this.div.setAttribute("show-idcode", false);

        this.appendChild(this.div);

        // connectedCallback is called twice (in Vaadin only).
        // This makes sure we only register our component once
        let add = true;
        for (const editorElement of window.editorElements) {
            if (editorElement.uuid == this.uuid) {
                add = false;
                break;
            }
        }
        if (add)
            window.editorElements.push(this);


        this.structureEditor = new OCL.StructureEditor(this.div, true, 1);

        var idcode = this.getAttribute("idcode");
        if (idcode)
            this.structureEditor.setIDCode(idcode);

        console.info("setting callback...")
        this.structureEditor.setChangeListenerCallback(StructureEditor.changeMolecule);
        console.info("set callback.")


        // window.setTimeout ( function() {
        //   var div = document.querySelector('#ed');
        //   console.info(div);
        //   var structureEditor = new OCL.StructureEditor(div, true, 1);
        // }, 3000);
        // var structureEditor = new OCL.StructureEditor(document.querySelector('WeatherCard')._shadowRoot.querySelector('div'));


        // let editor = document.createElement('div');
        // editor.innerHTML = `<p>web-component</p>`
        // this._shadowRoot.appendChild(editor);
    }

    static changeMolecule(idcode, molecule) {
        // TODO hack: find calling instance
        for (const editorElement of window.editorElements) {
            // console.info(editorElement.structureEditor.getMolecule().a===molecule.a);
            if (editorElement.structureEditor.getMolecule().a === molecule.a) {
                if (!editorElement.externalMolChange) {
                    console.info('changeMolecule callback ' + idcode);
                    // editorElement.setAttribute('idcode', idcode != null ? idcode.split(' ')[0] : "");
                    editorElement.idcode = idcode;
                }
            }
        }
    }

    get idcode() {
        if(this.hasAttribute('idcode') && this.getAttribute('idcode')!='')
            return this.getAttribute('idcode');
        else
            return null;
    }

    set idcode(idcode) {
        console.info('----');

        if(idcode && idcode != "" && idcode != "null") {
            if (!this.fromAttributeChange)
                this.setAttribute('idcode', idcode);

            if (this.structureEditor != null) {
                console.info('Setting idcode ' + idcode + '...');

                // temporarily disable changeMolecule callback
                this.externalMolChange = true;

                if (idcode == null || idcode == "null" || idcode == "")
                    this.structureEditor.setSmiles("");
                else
                    this.structureEditor.setIDCode(idcode);


                this.dispatchEvent(new CustomEvent('changed', {detail: idcode,}));

                this.externalMolChange = false;

                console.info('Set idcode.');
            }
        } else {
            this.removeAttribute('idcode');
        }
    }

    static get observedAttributes() {
        return ['idcode'];
    }

    attributeChangedCallback(name, oldValue, newValue) {
        this.fromAttributeChange = true;
        this.idcode = newValue;
        this.fromAttributeChange = false;
    }

    // set idcode(idcode) {
    //     console.info('----');
    //     if (this.structureEditor != null) {
    //         console.info('Setting idcode ' + idcode + '...');
    //
    //         // temporarily disable changeMolecule callback
    //         this.externalChange = true;
    //
    //         if(idcode==null || idcode=="null" || idcode == "")
    //             this.structureEditor.setSmiles("");
    //         else
    //             this.structureEditor.setIDCode(idcode);
    //
    //         this.externalChange = false;
    //
    //         console.info('Set idcode.');
    //     }
    // }

    // get idcode() {
    //     if(this.structureEditor != null)
    //         return this.structureEditor.getIDCode();
    //     else
    //         return null;
    // }


    // // component attributes
    // static get observedAttributes() {
    //     return [
    //         'idcode'
    //     ];
    // }
    //
    // attributeChangedCallback(attribute, oldValue, newValue) {
    //     if (oldValue === newValue)
    //         return;
    //
    //     console.info("attributeChangedCallback:" + attribute + "=" + newValue);
    //
    //     var observedAttributes = StructureEditor.observedAttributes;
    //
    //     if(attribute == observedAttributes[0]) {
    //         if (this.structureEditor != null) {
    //             // temporarily disable changeMolecule callback
    //             this.externalChange = true;
    //
    //             if(newValue==null || newValue=="null" || newValue == "")
    //                 this.structureEditor.setSmiles("");
    //             else
    //                 this.structureEditor.setIDCode(newValue);
    //
    //             this.externalChange = false;
    //         }
    //     } else {
    //         console.warn('Attribute StructureEditor.' + attribute + ' unknown!')
    //     }
    //
    //     // this.div.setAttribute("show-idcode", newValue);
    //
    // }

    create_UUID(){
        var dt = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = (dt + Math.random()*16)%16 | 0;
            dt = Math.floor(dt/16);
            return (c=='x' ? r :(r&0x3|0x8)).toString(16);
        });
        return uuid;
    }
}

window.customElements.define('structure-editor', StructureEditor);
